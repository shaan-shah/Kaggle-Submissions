%load_ext autoreload
%autoreload 2

%matplotlib inline

from fastai.imports import *
from fastai.structured import *

from pandas_summary import DataFrameSummary
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from IPython.display import display

from sklearn import metrics
PATH = "data/bulldozers/"
df_raw=pd.read_csv(f"{PATH}Train.csv",low_memory=False,parse_dates=["saledate"])
df_raw.SalePrice=np.log(df_raw.SalePrice)
add_datepart(df_raw,'saledate')
train_cats(df_raw)
df,y,nas=proc_df(df_raw,'SalePrice')
def split_vals(a,n):
    return a[:n].copy(), a[n:].copy()
n_valid=12000
n_trn=len(df)-n_valid
raw_train,raw_valid=split_vals(df_raw,n_trn)
X_train,X_valid=split_vals(df,n_trn)
y_train,y_valid=split_vals(y,n_trn)
def rmse(x,y): return math.sqrt(((x-y)**2).mean())

def print_score(m):
    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),
                m.score(X_train, y_train), m.score(X_valid, y_valid)]
    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)
    print(res)
m=RandomForestRegressor(n_jobs=-1,min_samples_leaf=3,max_features=0.5)
m.fit(X_train,y_train)
print_score(m)
